#lang racket

; higher procedure that simulates the 'identity' one;

#|(define (my-identity-n x) ; normal one
  x
  )
|#

(define (my-identity) ; using lambda
  (位 (x) x)
  )

; accepts a procedure and returns a lambda that accepts an argument and applies
; the procedure to it

(define (my-partially-apply f) ; ???
  (位 (x y) ((curry f) x y) )
  )

(define (my-compose f g)
  (位 (x) (f (g x)))
  )

; accepts a predicate and returns a lambda that accepts an argument and
; applies the negated predicate to it

(define (g p?)
  (位 (x) (not (p? x)))
  )

; accepts two procedures and retturn their composition over an argument of a lambda
; procedure

