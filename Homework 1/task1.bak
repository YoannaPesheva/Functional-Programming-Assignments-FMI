#lang racket

(define (bouncing-ball height bounce window)
  (cond
    [(>= window height) -1]
    [(< height window) 0]
    [(> (* height bounce) window)
     (+ (bouncing-ball (* height bounce) bounce window) 2) ; we add 2 because it goes up
                                                           ; and down
    ]
    [else 1] ; in case the bounce does not reach the window,
    ; we end the recursion but add 1, because height > window, so she will see
    ; the ball at least once ALWAYS
  )
)

(bouncing-ball 3 0.66 1.5)
(bouncing-ball 30 0.66 1.5)
(bouncing-ball 10 0.6 10)
(bouncing-ball 2 0.5 1.0) 